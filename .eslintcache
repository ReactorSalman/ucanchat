[{"/Users/sakhan/Modesty/ucanchat/src/App.js":"1","/Users/sakhan/Modesty/ucanchat/src/reportWebVitals.js":"2","/Users/sakhan/Modesty/ucanchat/src/index.js":"3"},{"size":3227,"mtime":1606638356340,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1606637795362,"results":"6","hashOfConfig":"5"},{"size":500,"mtime":1606637795361,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"122ch0o",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/sakhan/Modesty/ucanchat/src/App.js",["15"],"import React, { useRef, useState } from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n// import 'firebase/analytics';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyBD8851btTft8iHMaDYXmLRKYhoUEBOzXA\",\n  authDomain: \"ushipfriend.firebaseapp.com\",\n  databaseURL: \"https://ushipfriend.firebaseio.com\",\n  projectId: \"ushipfriend\",\n  storageBucket: \"ushipfriend.appspot.com\",\n  messagingSenderId: \"982688180304\",\n  appId: \"1:982688180304:web:c6b63a7074c3a832be4955\"\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n// const analytics = firebase.analytics();\n\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1 className=\"app-name-font\">sabChat</h1>\n        <SignOut />\n      </header>\n\n      <section>\n        {user ? <ChatRoom /> : <SignIn />}\n      </section>\n\n    </div>\n  );\n}\n\nfunction SignIn() {\n\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n    <>\n      <div>\n        <div>\n          <button className=\"loginBtn loginBtn--google\" onClick={signInWithGoogle}>\n            Sign in using Google\n\t\t\t\t\t</button>\n          <button className=\"loginBtn loginBtn--facebook\">\n            Sign in using facebook\n\t\t\t\t\t</button>\n        </div>\n        <p>Do not violate the community guidelines or you will be banned for life!</p>\n      </div>\n    </>\n  )\n\n}\n\nfunction SignOut() {\n  return auth.currentUser && (\n    <button className=\"logoutBtn\" onClick={() => auth.signOut()}>Sign Out</button>\n  )\n}\n\n\nfunction ChatRoom() {\n  const dummy = useRef();\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limit(25);\n\n  const [messages] = useCollectionData(query, { idField: 'id' });\n\n  const [formValue, setFormValue] = useState('');\n\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    })\n\n    setFormValue('');\n    dummy.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  return (<>\n    <main>\n\n      {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n      <span ref={dummy}></span>\n\n    </main>\n\n    <form onSubmit={sendMessage}>\n\n      <input className=\"placeholder-view\" value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"say something nice\" />\n\n      <button className=\"sendBtn\" type=\"submit\" disabled={!formValue}>Send</button>\n\n    </form>\n  </>)\n}\n\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (<>\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} />\n      <p>{text}</p>\n    </div>\n  </>)\n}\n\n\nexport default App;","/Users/sakhan/Modesty/ucanchat/src/reportWebVitals.js",[],"/Users/sakhan/Modesty/ucanchat/src/index.js",[],{"ruleId":"16","severity":1,"message":"17","line":131,"column":7,"nodeType":"18","endLine":131,"endColumn":88},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]